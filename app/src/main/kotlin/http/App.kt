/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package http

import java.io.*
import java.net.InetSocketAddress
import java.net.ServerSocket
import java.net.Socket

fun main(args: Array<String>) {

    // on Docker
    //val HOST = "0.0.0.0"
    val HOST = "localhost"
    val PORT = 8080
    val CRLF = "\r\n"

    println("start >>>")

    // Socket生成、IPとPort指定、SO_REUSEADDRオプション有効化
    val serverSocket = ServerSocket()
    serverSocket.bind(InetSocketAddress(HOST, PORT))
    serverSocket.reuseAddress = true
    println("listening on... ${serverSocket.localSocketAddress}")

    // リクエストヘッダ用ビルダー
    val header: StringBuilder = StringBuilder()

    // リクエストボディ
    var body = ""

    try {
        // 受信
        val socket = serverSocket.accept()
        val br = BufferedReader(InputStreamReader(socket.getInputStream()))
        val bw = BufferedWriter(OutputStreamWriter(socket.getOutputStream()))

        // 行単位で読み込んでビルダーに追加する
        // 空行で読込終了
        for (line in br.lines()) {
            if (line.isNullOrEmpty()) break
            header.append("$line\n")
        }

        // contentLength 出力
        val contentLength = header.split("\n").first { it.startsWith("Content-Length") }.takeAfterColon().toInt()
        println("contentLength: $contentLength")

        if (0 < contentLength) {
            val c = CharArray(contentLength)
            br.read(c)
            body = String(c)
        }

        // レスポンス
        bw.write("HTTP/1.1 200 OK$CRLF")
        bw.write("Content-Type: text/html$CRLF")
        bw.write(CRLF)
        bw.write("<h1>Test Kotlin!!</h1>")
        bw.flush()


    } catch (e: IOException) {
        println("CAUSE: ${e.cause}, MESSAGE: ${e.message}")
    }

    println("<<< end")

    // リクエストヘッダ出力
    println(header)

    // リクエストボディ出力
    println(body)

}

fun String.takeAfterColon(): String = this.split(":")[1].trim()
